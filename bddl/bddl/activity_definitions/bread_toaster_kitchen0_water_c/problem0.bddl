(define (problem Please_bring_the_bread_slice.n.01_from_the_reception_desk_in_kitchen_0_and_cook_it_using_the_toaster_oven.n.01_in_kitchen_0._Then,_pick_up_the_water_bottle.n.01_from_the_breakfast_table_in_dining_room_0_and_place_it_inside_the_cooler.n.01_in_storage_room_0.)
    (:domain omnigibson)
    (:objects
        bread_slice.n.01_1 - bread_slice.n.01
        reception_desk.n.01_1 - reception_desk.n.01
        toaster_oven.n.01_1 - toaster_oven.n.01
        water_bottle.n.01_1 - water_bottle.n.01
        breakfast_table.n.01_1 - breakfast_table.n.01
        cooler.n.01_1 - cooler.n.01
        floor.n.01_1 - floor.n.01
        agent.n.01_1 - agent.n.01
    )

    (:init
        ;; Initial states for bread and toaster
        (ontop bread_slice.n.01_1 reception_desk.n.01_1)
        (inroom reception_desk.n.01_1 kitchen_0)
        (inroom toaster_oven.n.01_1 kitchen_0)
        (not (toggled_on toaster_oven.n.01_1))

        ;; Initial states for water bottle and dining table
        (ontop water_bottle.n.01_1 breakfast_table.n.01_1)
        (inroom breakfast_table.n.01_1 dining_room_0)

        ;; Initial states for cooler
        (inroom cooler.n.01_1 storage_room_0)

        ;; Initial states for agent and floor
        (ontop agent.n.01_1 floor.n.01_1)
        (inroom floor.n.01_1 kitchen_0)
    )

    (:goal
        (and
            ;; Goal for cooked bread
            (cooked ?bread_slice.n.01_1)

            ;; Goal for water bottle in cooler
            (inside ?water_bottle.n.01_1 ?cooler.n.01_1)
        )
    )
)